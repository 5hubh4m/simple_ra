Formal Syntax for simple_ra's Relational Algebra

small = "a" .. "z"
caps = "A" .. "Z"
letter = small | caps
identifier = ( small | "_" ) { letter | digit | "_"  }
digit = "0" .. "9"
integer = [ "+" | "-" ] digit {digit}
number = [ "+" | "-" ] ( integer "." integer | integer )
string = "\"" char { char } "\""
value = string | number

comp = "=" | "/=" | "<=" | ">=" | "<" | ">"
boolean = "&&" | "||"
binary = "X" | "U" | "^" | "-" | "@"
operation = "~" | "<-"

compare = ( identifier | value ) comp ( identifier | value )
predicate  =  frontpred backpred
backpred = boolean frontpred [ backpred ]
frontpred = [ "!" ] basepred
basepred = "(" predicate ")" | compare

tuple = "{" identifier ":" value { "," identifier ":" value } "}"
aggregate = "MAX" | "MIN" | "SUM" | "AVG" | "COUNT"

simpexp = tuple
        | identifier
        | "SELECT" "[" predicate "]" "(" expression ")"
        | "AGGREGATE" "[" aggregate ":" identifier "]" "(" expression ")"
        | ("RENAME" | "PROJECT") "[" identifier { "," identifier } "]" "(" expression ")"
expression = frontexp backexp
backexp = binary frontexp [ backexp ]
frontexp = "(" expression ")" | simpexpression

statement = expression
          | "[" identifier "]" operation expression ";"
          
command = "quit" | "help" | "showall"
utility = "drop"
command = ":" ( command | utility identifier ) ";"
